rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create, update, delete): User with matching {userId} can modify their own profile.
     * @allow (get, list): User with matching {userId} can read their own profile.
     * @deny (create, update, delete): User attempting to modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to course information.
     * @path /courses/{courseId}
     * @allow (get, list): All authenticated users can view course details.
     * @deny (create, update, delete): No one can create, update, or delete courses.
     * @principle Grants public read access to course catalog.
     */
    match /courses/{courseId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to module information within a course.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (get, list): All authenticated users can view module details within a course.
     * @deny (create, update, delete): No one can create, update, or delete modules.
     * @principle Grants public read access to course modules.
     */
    match /courses/{courseId}/modules/{moduleId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to lesson information within a module.
     * @path /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}
     * @allow (get, list): All authenticated users can view lesson details within a module.
     * @deny (create, update, delete): No one can create, update, or delete lessons.
     * @principle Grants public read access to course lessons.
     */
    match /courses/{courseId}/modules/{moduleId}/lessons/{lessonId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to resource information.
     * @path /resources/{resourceId}
     * @allow (get, list): All users can view resource details.
     * @deny (create, update, delete): No one can create, update, or delete resources.
     * @principle Grants public read access to resources, owner-only writes (TODO: Implement owner-only writes).
     */
    match /resources/{resourceId} {
       allow get, list: if isSignedIn();
       allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to discussion threads within a module.
     * @path /courses/{courseId}/modules/{moduleId}/discussionThreads/{threadId}
     * @allow (get, list): All authenticated users can view discussion threads.
     * @allow (create): Authenticated users can create discussion threads.
     * @allow (update, delete): Only the creator can update or delete a discussion thread.
     * @deny (update, delete): Non-creators cannot modify threads.
     * @principle Restricts write access to the creator of the thread.
     */
    match /courses/{courseId}/modules/{moduleId}/discussionThreads/{threadId} {
      function isOwner(creatorId) {
        return request.auth != null && request.auth.uid == creatorId;
      }

       function isExistingOwner(creatorId) {
        return request.auth != null && request.auth.uid == resource.data.creatorId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if request.auth.uid == resource.data.creatorId;
      allow delete: if request.auth.uid == resource.data.creatorId;
    }

    /**
     * @description Controls access to replies to discussion threads.
     * @path /courses/{courseId}/modules/{moduleId}/discussionThreads/{threadId}/discussionReplies/{replyId}
     * @allow (get, list): All authenticated users can view discussion replies.
     * @allow (create): Authenticated users can create discussion replies.
     * @allow (update, delete): Only the creator can update or delete their own replies.
     * @deny (update, delete): Non-creators cannot modify replies.
     * @principle Restricts write access to the creator of the reply.
     */
    match /courses/{courseId}/modules/{moduleId}/discussionThreads/{threadId}/discussionReplies/{replyId} {
       function isOwner(creatorId) {
        return request.auth != null && request.auth.uid == creatorId;
      }

       function isExistingOwner(creatorId) {
        return request.auth != null && request.auth.uid == resource.data.creatorId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if request.auth.uid == resource.data.creatorId;
      allow delete: if request.auth.uid == resource.data.creatorId;
    }

    /**
     * @description Controls access to user's course progress.
     * @path /users/{userId}/courseProgress/{courseProgressId}
     * @allow (create, update, delete): User with matching {userId} can modify their own course progress.
     * @allow (get, list): User with matching {userId} can read their own course progress.
     * @deny (create, update, delete): User attempting to modify another user's course progress.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/courseProgress/{courseProgressId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user's module progress within a course.
     * @path /users/{userId}/courseProgress/{courseProgressId}/moduleProgress/{moduleProgressId}
     * @allow (create, update, delete): User with matching {userId} can modify their own module progress.
     * @allow (get, list): User with matching {userId} can read their own module progress.
     * @deny (create, update, delete): User attempting to modify another user's module progress.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/courseProgress/{courseProgressId}/moduleProgress/{moduleProgressId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user's certificates.
     * @path /users/{userId}/certificates/{certificateId}
     * @allow (create, update, delete): User with matching {userId} can modify their own certificates.
     * @allow (get, list): User with matching {userId} can read their own certificates.
     * @deny (create, update, delete): User attempting to modify another user's certificates.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/certificates/{certificateId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}