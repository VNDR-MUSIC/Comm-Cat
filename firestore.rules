/**
 * @file This Firestore Security Rules file enforces a strict, path-based ownership model for user-specific data while allowing public read access to course content and resources.
 *
 * Core Philosophy: User data is secured via path-based ownership (e.g., /users/{userId}), ensuring only authenticated users can access their own information. Course content and resources are generally publicly readable, but write access is restricted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /courses/{courseId}: Stores course information.
 * - /courses/{courseId}/modules/{moduleId}: Stores modules within a course.
 * - /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}: Stores lessons within a module.
 * - /users/{userId}/courseProgress/{courseProgressId}: Stores user's course progress.
 * - /courses/{courseId}/discussionThreads/{threadId}: Stores discussion threads.
 * - /courses/{courseId}/discussionThreads/{threadId}/posts/{postId}: Stores discussion posts (potentially requires denormalized membership data for write access control).
 * - /resources/{resourceId}: Stores publicly available resources.
 * - /users/{userId}/certificates/{certificateId}: Stores user certificates.
 * - /badges/{badgeId}: Stores badge information.
 * - /users/{userId}/badges/{userBadgeId}: Stores user badges.
 *
 * Key Security Decisions:
 * - User-specific data (profiles, progress, certificates, badges) is strictly controlled by path-based ownership.
 * - Courses, modules, lessons, discussion threads, and resources are publicly readable.
 * - Discussion posts might require denormalized membership data to control write access based on course enrollment.
 * - List operations are generally allowed for courses and resources, but restricted to owners for user-specific data.
 *
 * Denormalization for Authorization: The 'members' map in the /courses/{courseId}/discussionThreads/{threadId}/posts/{postId} collection will contain a map of user IDs who have access to the course. This eliminates the need for `get()` calls in security rules and supports atomic operations.
 *
 * Structural Segregation: User-specific data is stored under the /users/{userId} path, while publicly accessible data (courses, resources) are stored at the top level. This allows for different security rules for each type of data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the document being updated, and that the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && getSelf().data != null;
      }

      function getSelf() {
        return get(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all users

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == getSelf().data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read course details, but restricts creation, updates, and deletion.
     * @path /courses/{courseId}
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Allows anyone to read module details, but restricts creation, updates, and deletion.
     * @path /courses/{courseId}/modules/{moduleId}
     */
    match /courses/{courseId}/modules/{moduleId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add admin role validation
    }

    /**
     * @description Allows anyone to read lesson details, but restricts creation, updates, and deletion.
     * @path /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}
     */
    match /courses/{courseId}/modules/{moduleId}/lessons/{lessonId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add admin role validation
    }

    /**
     * @description Allows a user to read and write their own course progress data.
     * @path /users/{userId}/courseProgress/{courseProgressId}
     */
    match /users/{userId}/courseProgress/{courseProgressId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && getSelf().data != null;
      }

      function getSelf() {
        return get(/databases/$(database)/documents/users/$(userId)/courseProgress/$(courseProgressId));
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == getSelf().data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read discussion thread details, but restricts creation, updates, and deletion.
     * @path /courses/{courseId}/discussionThreads/{threadId}
     */
    match /courses/{courseId}/discussionThreads/{threadId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add admin/instructor role validation
    }

    /**
     * @description Allows users who are members of the course to create, read, update, and delete discussion posts.
     * @path /courses/{courseId}/discussionThreads/{threadId}/posts/{postId}
     */
    match /courses/{courseId}/discussionThreads/{threadId}/posts/{postId} {
      // Helper function to check if the user is a member of the course
      function isCourseMember(courseId) {
        return get(/databases/$(database)/documents/courses/$(courseId)).data.members[request.auth.uid] != null;
      }

      function isExistingCourseMember(courseId) {
        return isCourseMember(courseId) && getSelf().data != null;
      }

      function getSelf() {
        return get(/databases/$(database)/documents/courses/$(courseId)/discussionThreads/$(threadId)/posts/$(postId));
      }

      allow get, list: if true;
      allow create: if request.auth.uid != null && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingCourseMember(courseId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isExistingCourseMember(courseId);
    }

    /**
     * @description Allows anyone to read resource details, but restricts creation, updates, and deletion.
     * @path /resources/{resourceId}
     */
    match /resources/{resourceId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add admin role validation
    }

    /**
     * @description Allows a user to read and write their own certificate data.
     * @path /users/{userId}/certificates/{certificateId}
     */
    match /users/{userId}/certificates/{certificateId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && getSelf().data != null;
      }

      function getSelf() {
        return get(/databases/$(database)/documents/users/$(userId)/certificates/$(certificateId));
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == getSelf().data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read badge details, but restricts creation, updates, and deletion.
     * @path /badges/{badgeId}
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add admin role validation
    }

    /**
     * @description Allows a user to read and write their own badge data.
     * @path /users/{userId}/badges/{userBadgeId}
     */
    match /users/{userId}/badges/{userBadgeId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && getSelf().data != null;
      }

      function getSelf() {
        return get(/databases/$(database)/documents/users/$(userId)/badges/$(userBadgeId));
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == getSelf().data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}